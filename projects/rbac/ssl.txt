key generation algorithm
------------------------
that selects a private key uniformly at random from a set of possible private keys. The algorithm outputs the private key and a corresponding public key.

signing algorithm
-----------------
that, given a message and a private key, produces a signature.

signature verifying algorithm
-----------------------------
that, given the message, public key and signature, either accepts or rejects the message's claim to authenticity.

certificate
-----------
The certificate is, nominally, a container for the public key. It includes the public key, the server name, some extra information about the server, and a signature computed by a certification authority.

chain
-----
When the server sends its public key to a client, it actually sends its certificate, with a few other certificates (the certificate which contains the public key of the CA which signed its certificate, and the certificate for the CA which signed the CA's certificate, and so on). Certificates are intrinsically public objects.

pfx
---
A ".pfx" file is a PKCS#12 archive: a bag which can contain a lot of objects with optional password protection; but, usually, a PKCS#12 archive contains a certificate (possibly with its assorted set of CA certificates) and the corresponding private key.

------------------------------------------------------

How does SSL/TLS work?
http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work

How is it possible that people observing an HTTPS connection being established wouldn't know how to decrypt it?
http://security.stackexchange.com/questions/6290/how-is-it-possible-that-people-observing-an-https-connection-being-established-w

What’s in a certificate chain and why?
https://unmitigatedrisk.com/?p=397

How do SSL chains work?
http://superuser.com/questions/347588/how-do-ssl-chains-work

X.509
https://en.wikipedia.org/wiki/X.509

SSL Made Easy for Beginners
https://info.ssl.com/ssl-made-easy-for-beginners/

Configure mongod and mongos for TLS/SSL
http://docs.mongodb.org/master/tutorial/configure-ssl/

Examples of openssl commands:
https://www.sslshopper.com/article-most-common-openssl-commands.html

-------------------------------------------------------------------------

view certificate

openssl x509 -in myroot-ca.crt -text -noout

generate root key and cert

openssl genrsa -out myroot-ca.key 4096
openssl req -new -x509 -days 1826 -key myroot-ca.key -out myroot-ca.crt

generate intermediate cert

openssl genrsa -out interm.key 4096
openssl req -new -key interm.key -out interm.csr
openssl x509 -req -days 730 -in interm.csr -CA myroot-ca.crt -CAkey myroot-ca.key -set_serial 01 -out interm.crt
cat interm.crt myroot-ca.crt > chain.pem

chain for node
--------------
cat server_correct.crt interm.crt > node_chain.pem
cat server_correct.crt interm.crt myroot-ca.crt > node_chain_with_root.pem

generate node cert

openssl genrsa -out server.key 4096     
openssl req -new -key server.key -out server.csr
openssl x509 -req -days 365 -in server.csr -CA interm.crt -CAkey interm.key -CAcreateserial -out server.crt
openssl pkcs12 -export -out server.pfx -inkey server.key -in server.crt -certfile chain.pem

Note: 

verify:

openssl verify -verbose -CAfile chain.pem  server.crt
NO: openssl verify -verbose -CAfile myroot-ca.crt  server.crt
NO: openssl verify -verbose -CAfile interm.crt  server.crt


----------------------------------------------

current files:

all in data/n_0/config/

local-ssl-cert.pem
local-ssl-pkey.pem
local-ssl-meta - needed to make sure that local cert was generated from cluster cert


/// passed to query, ssl proxy, capi service, rest service
ssl-cert-key.pem - local cert + local key
ssl-cert-key.pem-ca - cluster cert

memcached-key.pem - local key
memcached-cert.pem - local cert + cluster cert

configured in memcached.json
"ssl":{"key":"/Users/artem/Work/watson/ns_server/data/n_0/config/memcached-key.pem","cert":"/Users/artem/Work/watson/ns_server/data/n_0/config/memcached-cert.pem"}}

cluster cert management:
ns_server_cert.erl

local certificates management:
ns_ssl_services_setup.erl


-----------------------------

https://127.0.0.1:19000/index.html


PEM Format
It is the most common format that Certificate Authorities issue certificates in. It contains the ‘—–BEGIN CERTIFICATE—–” and “—–END CERTIFICATE—–” statements.

Several PEM certificates and even the Private key can be included in one file, one below the other. But most platforms(eg:- Apache) expects the certificates and Private key to be in separate files.
> They are Base64 encoded ACII files
> They have extensions such as .pem, .crt, .cer, .key
> Apache and similar servers uses PEM format certificates

PFX/PKCS#12
They are used for storing the Server certificate, any Intermediate certificates & Private key in one encryptable file.
> They are Binary format files
> They have extensions .pfx, .p12
> Typically used on Windows OS to import and export certificates and Private keys

Convert PEM to PFX
——————————————————————————————————————————————————
$ openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CAcert.crt
———————————————————————————————————————————

Convert PFX to PEM
——————————————————————————————–
$ openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes
——————————————————————————————–

NOTE: While converting PFX to PEM format, openssl will put all the Certificates and Private Key into a single file. You will need to open the file in Text editor and copy each Certificate & Private key(including the BEGIN/END statements) to its own individual text file and save them as certificate.cer, CAcert.cer, privateKey.key respectively.


Chain:
-----
cat clustercert.pem intermediate_ca_cert.pem root_ca.pem >> cbasechain.pem 
openssl pkcs12 -export -in cbasechain.pem -out cbasechain.pfx

The certificates in the chain file MUST be ordered, with each certificate immediately following the certificate it signed, and the final well-known root CA certificate must thus be last.

Order in chain:
http://blog.edgecloud.com/post/19519955133/ssl-certificate-chain-order-matters

<your certificate>
<your cert signer>
<signer for your cert signer>
<etc>

The last one can be the root certificate, but technically, it doesn’t need to be in there, and I found some references around the web that certain poorly built SSL clients will fail out if the root certificate is in the file.


Log
---

ip: 192.168.0.76

public_key.erl
ssl_certificate.erl

Correct certificate server_correct.crt:
subject=/C=US/ST=CA/L=San Francisco/O=Internet Widgits Pty Ltd/CN=192.168.0.76

hostname validation library:
https://github.com/benoitc/ssl_verify_hostname/blob/master/src/ssl_verify_hostname.erl

ns_config
---------

{cluster_ca, [{pem, <pem encoded ca>},
              {subject, <sub>},
              {expires, <timestamp>}]}
{{node, node(), cert}, [{validated, yes/no},
                        {expires, <timestamp>}]}


existing api
------------

GET /pools/default/certificate
POST /controller/regenerateCertificate

proposed api
------------

POST /controller/uploadClusterCA
POST /controller/setNodeCertificate

curl -X POST --data-binary "@/Users/artem/Work/cert/myroot-ca.crt" http://Administrator:asdasd@127.0.0.1:9000/controller/uploadClusterCA

curl -X POST --data "chain=/Users/artem/Work/cert/node_chain.pem&pkey=/Users/artem/Work/cert/server.key" http://Administrator:asdasd@127.0.0.1:9000/controller/setNodeCertificate

curl -X POST --data "chain=/Users/artem/Work/cert/localhost_chain.pem&pkey=/Users/artem/Work/cert/server.key" http://Administrator:asdasd@127.0.0.1:9000/controller/setNodeCertificate


keytool -importcert -file gen.crt -keystore javakeystore
keytool -importcert -file myroot-ca.crt -alias superca -keystore javakeystore
keytool -list -keystore javakeystore


------------------------------------------------

Uploaded:
MEMCACHED CHAIN:
Subject: "C=US, ST=CA, L=San Francisco, O=Internet Widgits Pty Ltd, CN=192.168.0.76"
Issuer: "C=US, ST=CA, L=San Francisco, O=Not That Important Authority"
Validity: {{{2015,11,13},{22,27,28}},{{2016,11,12},{22,27,28}}}
********
Subject: "C=US, ST=CA, L=San Francisco, O=Not That Important Authority"
Issuer: "C=US, ST=CA, L=San Francisco, O=Super Root Authority"
Validity: {{{2015,10,5},{0,36,31}},{{2017,10,4},{0,36,31}}}
********
Subject: "C=US, ST=CA, L=San Francisco, O=Super Root Authority"
Issuer: "C=US, ST=CA, L=San Francisco, O=Super Root Authority"
Validity: {{{2015,10,5},{0,31,56}},{{2020,10,4},{0,31,56}}}
*

CI

IC

Generated:
MEMCACHED CHAIN:
Subject: "CN=127.0.0.1"
Issuer: "CN=Couchbase Server 0df4efb8"
Validity: {{{2013,1,1},{0,0,0}},{{2049,12,31},{23,59,59}}}
********
Subject: "CN=Couchbase Server 0df4efb8"
Issuer: "CN=Couchbase Server 0df4efb8"
Validity: {{{2013,1,1},{0,0,0}},{{2049,12,31},{23,59,59}}}


Exception for uploaded chain

Caused by: sun.security.validator.ValidatorException: No trusted certificate found


New way to generate certs:
--------------------------
go run gencert.go -store-to=/Users/artem/Work/cert/newcerts/root -common-name=Root\ Authority
go run gencert.go -store-to=/Users/artem/Work/cert/newcerts/interm -sign-with=/Users/artem/Work/cert/newcerts/root -common-name=Intemediate\ Authority
go run gencert.go -store-to=/Users/artem/Work/cert/newcerts/local -sign-with=/Users/artem/Work/cert/newcerts/interm -common-name=127.0.0.1 -final=true

cat /Users/artem/Work/cert/newcerts/local.crt /Users/artem/Work/cert/newcerts/interm.crt > /Users/artem/Work/cert/newcerts/long_chain.pem

curl -X POST --data "chain=/Users/artem/Work/cert/newcerts/long_chain.pem&pkey=/Users/artem/Work/cert/newcerts/local.key" http://Administrator:asdasd@127.0.0.1:9000/controller/setNodeCertificate

short chain
-----------
go run gencert.go -store-to=/Users/artem/Work/cert/newcerts/simple -sign-with=/Users/artem/Work/cert/newcerts/root -common-name=127.0.0.1 -final=true
curl -X POST --data "chain=/Users/artem/Work/cert/newcerts/simple.crt&pkey=/Users/artem/Work/cert/newcerts/simple.key" http://Administrator:asdasd@127.0.0.1:9000/controller/setNodeCertificate

curl -X POST --data-binary "@/Users/artem/Work/cert/newcerts/root.crt" http://Administrator:asdasd@127.0.0.1:9000/controller/uploadClusterCA

---------------------------------------------------------------------
GENERATED
---------------------------------------------------------------------
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            14:1d:bd:f5:35:f1:2b:7a
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: CN=Couchbase Server 0df4efb8
        Validity
            Not Before: Jan  1 00:00:00 2013 GMT
            Not After : Dec 31 23:59:59 2049 GMT
        Subject: CN=127.0.0.1
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (1024 bit)
        X509v3 extensions:
            X509v3 Key Usage: critical
                Digital Signature, Key Encipherment
            X509v3 Extended Key Usage: 
                TLS Web Server Authentication
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Subject Alternative Name: 
                IP Address:127.0.0.1
    Signature Algorithm: sha256WithRSAEncryption


Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number:
            cc:9c:6a:79:97:95:aa:0f
        Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=US, ST=CA, L=San Francisco, O=Not That Important Authority
        Validity
            Not Before: Dec  7 21:37:10 2015 GMT
            Not After : Dec  6 21:37:10 2016 GMT
        Subject: C=AU, ST=Some-State, O=Internet Widgits Pty Ltd, CN=127.0.0.1
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (4096 bit)
    Signature Algorithm: sha1WithRSAEncryption

-----------------------------------

node: engageCluster2 - engage_cluster

cluster : do_add_node_engaged

------------------------------------------

REFRESH:
ns_ssl_services_setup.erl

set_node_certificate_chain
delete {node, node(), cert}
write files
ns_config:set({node, node(), cert}, Props),




case ns_config:search(Config, {node, Node, cert}) of
{value, Props}




ls ~/Work/watson/ns_server/data/n_0/



latest
------

curl -X GET http://Administrator:asdasd@127.0.0.1:9000/pools/default/certificate


curl -X POST --data-binary "@/Users/artem/Work/cert/newcerts/root.crt" http://Administrator:asdasd@127.0.0.1:9000/controller/uploadClusterCA

mkdir ~/Work/watson/ns_server/data/n_0/inbox

cp /Users/artem/Work/cert/newcerts/long_chain.pem ~/Work/watson/ns_server/data/n_0/inbox/chain.pem

cp /Users/artem/Work/cert/newcerts/local.key ~/Work/watson/ns_server/data/n_0/inbox/pkey.key

curl -X POST http://Administrator:asdasd@127.0.0.1:9000/node/controller/reloadCertificate


--------------------------------------------------------------------------------

REST API's for managing certificates:

GET /pools/default/certificate

Returns current Cluster CA. Without parameters works the same way as it worked pre Watson.
With parameter extended=true returns extended certificate info:
{"cert": {"type" : ..., "pem" : ..., "subject" : ..., "expires" : ...}, warnings: []}
type - generated or uploaded
pem - pem encoded certificate
subject - abbreviated certificate subject
expires - expiration data
warnings - warnings to be displayed in UI

example:
$ curl -X GET http://user:password@127.0.0.1:9000/pools/default/certificate?extended=true

{"cert":{"type":"uploaded","pem":"-----BEGIN CERTIFICATE-----\nMIIC6DCCAdKgAwIBAgIIFB4YAjF90MgwCwYJKoZIhvcNAQELMBkxFzAVBgNVBAMT\nDlJvb3QgQXV0aG9yaXR5MB4XDTEzMDEwMTAwMDAwMFoXDTQ5MTIzMTIzNTk1OVow\nGTEXMBUGA1UEAxMOUm9vdCBBdXRob3JpdHkwggEiMA0GCSqGSIb3DQEBAQUAA4IB\nDwAwggEKAoIBAQDBum06stdiYQI2HQyjZeg3s0Pz8CziXqSg4GicaeKNloOfASwl\n+8LQDX5Dgb+Mc4ZxXYo9/7eVlsvSiZPZcv9D2pubjR4ZtEDY5t9AlXDiYTHK0zxG\nB34Llnz3gJmkAEAsjy4g+RfwpJS4kGVzFhrzgxOQJIJogZnLduk+mHFjyXI3X+8y\nf4KF8ijrXP8bbfa0kM1tjvcttaK7vTEP+G/mbOEFZErhScXT9eKRlgwsitaH7kI0\nimpqg3YX1znLQ5n+eLzeVR1HhszJrFaaaRHL0esml6jLEcZBBitJSuEuaMLp9ZWB\nA479ZHmN/vZc1SwfMrCE2+TE0ytW3O7eFXjXAgMBAAGjODA2MA4GA1UdDwEB/wQE\nAwIApDATBgNVHSUEDDAKBggrBgEFBQcDATAPBgNVHRMBAf8EBTADAQH/MAsGCSqG\nSIb3DQEBCwOCAQEACReNkvIXhjPO0rWpgdVSqnLrjUb6DJf0n4Uyq6PfukeEfBtF\n59L+xUcoY6NFM5N6qRlGgg0eqTCVmQ6N6lKnnZRH23g3BPLjU2EqAtBHIc5f2JoM\nd1E4UD2v20MlFoeHL0YljGTywlqStoZYc2uYUJnJAVq2D1dWcwP2S7G6caLHMlAl\nQVYIZvjCGuqGckV1EqOTT7uKPH9ulljtYKVIq/aTbINjX0hJsaoN2hOfHVTp2Shq\neLMwgfNdg6zWRyeL/Mi/3jmSjSH61zyHva2xlY8Pl6Zurx/+pF1qN27+P8tCjsDO\nD2hAADXr8WRqC1Sd+xAGcFkvqOOFv/HRxDej3A==\n-----END CERTIFICATE-----\n","subject":"CN=Root Authority","expires":"2049-12-31T15:59:59.000Z"},"warnings":[{"node":"n_0@127.0.0.1","message":"Certificate is not signed with cluster CA."}]}

Possible warmnings:
{"node":"n_0@127.0.0.1","message":"Certificate is not signed with cluster CA."}
{"node":"n_0@127.0.0.1","message":"Certificate is expired."}
{"node":"n_0@127.0.0.1","message":"Certificate will expire soon.","expires":"2049-12-31T15:59:59.000Z"}

POST /controller/uploadClusterCA

Uploads root certificate (Cluster CA) to the cluster. That certificate will be displayed in UI and used for XDCR replications and for clients certificate stores.

example:
curl -X POST --data-binary "@/path/root.crt" http://user:password@127.0.0.1:9000/controller/uploadClusterCA

returns:
Same output as GET /pools/default/certificate?extended=true

POST /node/controller/reloadCertificate

Grabs chain.pem and pkey.pem from the <data folder>/inbox/ directory and applies them to the node.

example:
curl -X POST http://user:password@127.0.0.1:9000/node/controller/reloadCertificate

Returns:
200 - if success
400 with errpor message if failed. 



pkix_sign_types(?sha1WithRSAEncryption) ->
    {sha, rsa};
pkix_sign_types(?'sha-1WithRSAEncryption') ->
    {sha, rsa};
pkix_sign_types(?sha224WithRSAEncryption) ->
    {sha224, rsa};
pkix_sign_types(?sha256WithRSAEncryption) ->
    {sha256, rsa};
pkix_sign_types(?sha384WithRSAEncryption) ->
    {sha384, rsa};
pkix_sign_types(?sha512WithRSAEncryption) ->
    {sha512, rsa};
pkix_sign_types(?md5WithRSAEncryption) ->
    {md5, rsa};
pkix_sign_types(?'id-dsa-with-sha1') ->
    {sha, dsa};
pkix_sign_types(?'id-dsaWithSHA1') ->
    {sha, dsa};
pkix_sign_types(?'ecdsa-with-SHA1') ->
    {sha, ecdsa};
pkix_sign_types(?'ecdsa-with-SHA256') ->
    {sha256, ecdsa};
pkix_sign_types(?'ecdsa-with-SHA384') ->
    {sha384, ecdsa};
pkix_sign_types(?'ecdsa-with-SHA512') ->
    {sha512, ecdsa}.


pkix_sign_types(AlgorithmId) -> {DigestType, SignatureType}

Types:

AlgorithmId = oid()
Signature OID from a certificate or a certificate revocation list.
DigestType = rsa_digest_type() | dss_digest_type()
SignatureType = rsa | dsa | ecdsa

https://gist.github.com/anonymous/5e514ad3604c29dd9357


--------------------------------------------------------------------


curl -X POST --data-binary "@/Users/artem/Work/bugs/certs/root/ca.pem" http://Administrator:asdasd@127.0.0.1:9000/controller/uploadClusterCA
mkdir ~/Work/watson/ns_server/data/n_0/inbox
cp node/chain.pem ~/Work/watson/ns_server/data/n_0/inbox/chain.pem
cp node/pkey.key ~/Work/watson/ns_server/data/n_0/inbox/pkey.pem
curl -X POST http://Administrator:asdasd@127.0.0.1:9000/node/controller/reloadCertificate


---------------------------------------------

mkdir root
cd root
;; openssl genrsa -out ca.key 2048
openssl genrsa -aes256 -out ca.key 4096
openssl req -new -x509  -days 3650 -sha256 -key ca.key -out ca.pem -subj '/C=UA/O=My Company/CN=My Company Root CA'openssl req -new -x509  -days 3650 -sha256 -key ca.key -out ca_e.pem -subj '/C=UA/O=My Company/CN=My Company Root CA'




-----BEGIN CERTIFICATE-----
MIIFozCCA4ugAwIBAgIJALno1wiypvITMA0GCSqGSIb3DQEBCwUAMD8xCzAJBgNV
BAYTAlVBMRMwEQYDVQQKEwpNeSBDb21wYW55MRswGQYDVQQDExJNeSBDb21wYW55
IFJvb3QgQ0EwHhcNMTYwNDE5MDYyODUxWhcNMjYwNDE3MDYyODUxWjA/MQswCQYD
VQQGEwJVQTETMBEGA1UEChMKTXkgQ29tcGFueTEbMBkGA1UEAxMSTXkgQ29tcGFu
eSBSb290IENBMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEApnBJ96wl
vev6tR4AGdUTbCaB0rnvdP+WGeTpxD/hBVe93KwowpPV9PcwtTkmXh37g2ipOSPo
HogO5rZd9Tiz+mFl4d+Ilxkq35tCOSIIZ5SUx7SBj4T/H3PVQJPKs6pZmlcYj3u+
3ScpUPVly/EOXJ4NTR1DC0AIL5DXm0eMqHvA9FmiEaD7Vns3hErLKTL48pN1AuSo
6Z2SPw9tnX3c7Ro9xSYPzVoIfaD6aPPM7gR0a54E+wt+XulDMQWSCb8pzz9vHhvt
E5r4WFlfqPHULX/x4yaSSS8z04QaRd9N9/cPlMPy/o+MtxPBHFw8JkE1YwjUDO3G
s4q2ftX0/i9DGTmkb1oIV93mi+awR9IVY4sY+kcPRb25P2KVWrpUCYB6LroAW0Rn
gYChojat09w75utQlFkIszeUP9dmoX5lXjoI6sU6J2hK+kIEQ6Q9QIF4TAZEgdqC
BwlOSMVrOVxAQs7tHrrl4wCbnF32SmTmebvZOMo1Nf8nidi6h462FgxeoCWaXrk2
2XdXH9TRnSglbwBn0sjUOIGWAdiJDSEA58xJITuBOgHHJzF0nafVpc/YspH0HlIg
iSXYZKP0fJIGn44BWFblx627mJXidLnRNwcIMPvJCLFSKK3WrmrrDyI1jb97Cuhx
ARzrdlF9pzCZG4ZjiUatjkD3dnYmNqJcymECAwEAAaOBoTCBnjAdBgNVHQ4EFgQU
gkRKj6lBjG74nXQ78xyv8EvLqNUwbwYDVR0jBGgwZoAUgkRKj6lBjG74nXQ78xyv
8EvLqNWhQ6RBMD8xCzAJBgNVBAYTAlVBMRMwEQYDVQQKEwpNeSBDb21wYW55MRsw
GQYDVQQDExJNeSBDb21wYW55IFJvb3QgQ0GCCQC56NcIsqbyEzAMBgNVHRMEBTAD
AQH/MA0GCSqGSIb3DQEBCwUAA4ICAQAKzM0TFsM2oGW9svNpOvfuPjgGCz4x0jLo
bK/cl2Nv68xshLkY0m7qEDxFl4m0OZDTuBzGY9yPS22nAuQwGP9hHXAE1oyKF9Zw
laOjh89KTpwd1FVLTNk3HKSgY55iOkmOSyFapMpOrmcOcOIsmPnzxz/0jwSPKAwG
/1CxLbY1NRIpFXSCBrMjNA3DRYB6a0qwsHfOz2q5q/H8Tbj4RmL8+1iy+B0lRnVs
QbV64a/g+UHh+t3ghr8FDg+hl7+BKTQCeBLbJ6canxW7kH3X4Kz/O7BqmgFjeO8w
i6iE59wt9aTdgkzlhN8JUjKdTMQfewGIOoqjBgTY+Uk/5+mJtaYxjv9w+QypIIIi
i1cctnEliAhhDqYW/8UKpPxl3ZbjyOHBIeg+LYHac/Ej64mjP+66l8n7tH2GVrLW
QCA0TSKYerj9itxW5jLjmkab7hZhR1xwLEK1hvxyOOJ+O+CTVZ5nTtM8mmM57Mcw
KdBHijkHVwgeIfYBAFX+BestHlXo57Pkt5pU4e10ott2dL8MadQ2aHLN9PGY9cDP
VxGbXnj3abH93UZ3W6rx9VfEYik+smGFMf5E/ORJikjs3AUUQIUNH3QKydnO5pAM
5xNwHQhpKvwSyuby7bsnRoGwdvdPSzppeOPVPLxXsiJAe5UK+UCNfGlc4pzYjtBU
UrYcv2QIQA==
-----END CERTIFICATE-----


---------------------------------------------

couchbasesMBP3:city artem$ openssl x509 -in ca.pem -text -noout
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            62:e8:b8:c0:d6:72:d6:ad:4d:a6:b6:f2:3d:52:4c:92
        Signature Algorithm: sha1WithRSAEncryption
        Issuer: DC=net, DC=Citi, CN=Citi Internal Root CA Untrusted
        Validity
            Not Before: Mar 20 23:16:31 2014 GMT
            Not After : Mar 20 23:26:25 2029 GMT
        Subject: DC=net, DC=Citi, CN=Citi Internal Root CA Untrusted
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (2048 bit)
                Modulus (2048 bit):
                    00:b0:ff:fc:96:0f:94:1a:6b:e5:9f:e6:36:dd:3d:
                    5d:b6:96:ef:01:f0:43:05:4f:6d:24:81:0c:99:01:
                    40:d0:cb:f2:15:05:05:79:9d:54:b6:1d:a7:ba:fe:
                    1d:41:71:14:83:64:3d:0c:78:b1:99:e8:b2:aa:ad:
                    4f:a5:f9:23:c4:85:44:4c:6a:be:de:fa:ec:22:35:
                    6e:39:d9:42:d7:e2:a0:78:37:7b:b0:2f:a7:d8:ca:
                    f7:3b:8d:be:88:a5:95:32:c9:07:46:20:af:05:77:
                    b6:5b:2d:fb:2b:a6:b0:71:af:1c:07:fe:31:79:12:
                    e5:ce:aa:4a:2d:3b:8d:2d:a9:0f:89:89:ae:8c:9a:
                    4c:23:ca:10:7c:95:39:18:61:67:b6:2d:eb:57:c3:
                    9c:23:3b:a8:19:5b:90:ea:35:db:bb:df:08:da:4c:
                    94:ac:87:80:03:6e:d6:b5:72:62:37:3c:65:71:fe:
                    1a:5a:72:ea:74:00:0e:74:fa:14:4e:63:81:d8:c8:
                    78:b7:42:8e:8f:ca:f6:9e:fe:02:a7:84:34:34:ad:
                    fc:e4:bc:1e:27:10:01:88:38:4c:a9:c2:03:03:c8:
                    69:5b:62:0b:7b:61:b9:7b:3a:54:76:71:05:d4:d6:
                    33:b3:3a:1b:e6:c8:e5:6d:34:2b:14:20:c3:01:1a:
                    96:3d
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            1.3.6.1.4.1.311.20.2: 
                ...C.A
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Subject Key Identifier: 
                52:84:FD:42:43:CE:84:F3:75:DD:40:F2:D0:7B:B1:9A:83:A6:6B:22
            1.3.6.1.4.1.311.21.1: 
                ...
    Signature Algorithm: sha1WithRSAEncryption
        65:fd:d1:44:8c:6b:3c:2b:bc:ff:12:0c:e2:e2:a5:20:c2:a8:
        17:d6:2a:c0:68:2f:b0:a0:e9:98:f0:cd:f9:f7:9e:3d:ea:15:
        6d:36:65:02:6f:61:2d:2e:32:d6:60:2c:30:ec:36:eb:e5:98:
        f1:e0:39:a3:47:26:08:3b:70:b9:c0:a7:2f:56:04:13:e6:61:
        fe:18:f9:80:41:11:c7:08:06:b7:f6:36:2d:04:66:93:f1:2b:
        dc:5c:16:6f:85:bc:c3:33:93:7b:00:7f:07:ac:4e:1a:77:a9:
        3e:27:e4:94:6f:dc:e7:5e:ca:11:d4:82:46:bf:bf:0d:18:e3:
        17:af:6d:60:59:8f:e2:ce:55:82:c8:88:ed:8a:bd:f2:d9:2e:
        3f:4c:49:8e:73:ea:8c:bc:6b:2e:05:40:44:e1:c8:81:58:54:
        02:48:4d:1a:71:46:d3:1f:03:21:3a:bf:f8:16:5c:57:ee:4a:
        77:41:a8:d2:da:9b:19:ea:f8:97:f2:92:07:2a:10:4e:a1:81:
        0c:f9:5c:c1:a5:0c:1a:a8:7b:79:f5:db:fa:ce:3f:6a:9c:23:
        20:16:cf:e0:3f:4e:72:6d:01:c4:5f:5a:f1:e6:26:2a:9f:36:
        5f:a6:f7:04:0d:e8:47:d6:3a:7e:f4:08:97:0d:51:cb:a8:a0:
        5a:6c:0b:09


openssl verify -verbose -CAfile <(cat int2.pem int1.pem ca.pem) public_cert.pem
cp correct_chain.pem ~/Work/watson/ns_server/data/n_0/inbox/chain.pem
cp pkey.key ~/Work/watson/ns_server/data/n_0/inbox/pkey.key
curl -X POST http://Administrator:asdasd@127.0.0.1:9000/node/controller/reloadCertificate

--------------------------------------------------

ns_server ciphers setup:

1. grabs cipher list in erlang format from ssl_ciphers
2. if not defined: ssl:cipher_suites() -- low_security_ciphers()

openssl->internal
ssl_cipher:openssl_suite/1

internal->openssl
ssl_cipher:openssl_suite_name/1

internal->erlang
ssl:suite_definition

erlang->internal
ssl_cipher:suite

golang:
./goproj/src/github.com/couchbase/query/util/ssl_ciphers.go:40:


{rsa, aes_128_cbc, sha}
{rsa, aes_256_cbc, sha}
{ecdhe_ecdsa, aes_256_cbc, sha}
{ecdhe_rsa, aes_256_cbc, sha}

ssl_cipher:suite({rsa, aes_128_cbc, sha}).             
<<0,47>>

(n_0@127.0.0.1)17> ssl_cipher:suite_definition(<<0,47>>).               
{rsa,aes_128_cbc,sha,default_prf}

High:
0x002f		{tls.TLS_RSA_WITH_AES_128_CBC_SHA,
 { 0x00, 0x2F };
0x0035			tls.TLS_RSA_WITH_AES_256_CBC_SHA,
{ 0x00, 0x35 }
0xc00a			tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
{ 0xC0, 0x0A }
0xc014			tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
-0xc02f			tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
-0xc02b			tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256},

Med:
		{tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
			tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
			tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256},

Med + High:
{tls.TLS_RSA_WITH_AES_128_CBC_SHA,
			tls.TLS_RSA_WITH_AES_256_CBC_SHA,
			tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
			tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
			tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
			tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
			tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,   - Med + High !!!
			tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256}}


const (
  	TLS_RSA_WITH_RC4_128_SHA                uint16 = 0x0005
  	TLS_RSA_WITH_3DES_EDE_CBC_SHA           uint16 = 0x000a
  	TLS_RSA_WITH_AES_128_CBC_SHA            uint16 = 0x002f
  	TLS_RSA_WITH_AES_256_CBC_SHA            uint16 = 0x0035
  	TLS_RSA_WITH_AES_128_CBC_SHA256         uint16 = 0x003c
  	TLS_RSA_WITH_AES_128_GCM_SHA256         uint16 = 0x009c
  	TLS_RSA_WITH_AES_256_GCM_SHA384         uint16 = 0x009d
  	TLS_ECDHE_ECDSA_WITH_RC4_128_SHA        uint16 = 0xc007
  	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA    uint16 = 0xc009
  	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA    uint16 = 0xc00a
  	TLS_ECDHE_RSA_WITH_RC4_128_SHA          uint16 = 0xc011
  	TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA     uint16 = 0xc012
  	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA      uint16 = 0xc013
  	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA      uint16 = 0xc014
  	TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 uint16 = 0xc023
  	TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256   uint16 = 0xc027
  	TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256   uint16 = 0xc02f
  	TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 uint16 = 0xc02b
  	TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384   uint16 = 0xc030
  	TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 uint16 = 0xc02c
  	TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305    uint16 = 0xcca8
  	TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305  uint16 = 0xcca9
  
  	// TLS_FALLBACK_SCSV isn't a standard cipher suite but an indicator
  	// that the client is doing version fallback. See
  	// https://tools.ietf.org/html/rfc7507.
  	TLS_FALLBACK_SCSV uint16 = 0x5600
  )


(n_0@127.0.0.1)1> ns_ssl_services_setup:supported_ciphers().
[{dhe_rsa,aes_256_cbc,sha256},
 {dhe_dss,aes_256_cbc,sha256},
 {rsa,aes_256_cbc,sha256},
 {dhe_rsa,aes_128_cbc,sha256},
 {dhe_dss,aes_128_cbc,sha256},
 {rsa,aes_128_cbc,sha256},
 {dhe_rsa,aes_256_cbc,sha},
 {dhe_dss,aes_256_cbc,sha},
 {rsa,aes_256_cbc,sha},
 {dhe_rsa,'3des_ede_cbc',sha},
 {dhe_dss,'3des_ede_cbc',sha},
 {rsa,'3des_ede_cbc',sha},
 {dhe_rsa,aes_128_cbc,sha},
 {dhe_dss,aes_128_cbc,sha},
 {rsa,aes_128_cbc,sha}]

(n_0@127.0.0.1)2> ssl:cipher_suites().
[{dhe_rsa,aes_256_cbc,sha256},
 {dhe_dss,aes_256_cbc,sha256},
 {rsa,aes_256_cbc,sha256},
 {dhe_rsa,aes_128_cbc,sha256},
 {dhe_dss,aes_128_cbc,sha256},
 {rsa,aes_128_cbc,sha256},
 {dhe_rsa,aes_256_cbc,sha},
 {dhe_dss,aes_256_cbc,sha},
 {rsa,aes_256_cbc,sha},
 {dhe_rsa,'3des_ede_cbc',sha},
 {dhe_dss,'3des_ede_cbc',sha},
 {rsa,'3des_ede_cbc',sha},
 {dhe_rsa,aes_128_cbc,sha},
 {dhe_dss,aes_128_cbc,sha},
 {rsa,aes_128_cbc,sha},
 {rsa,rc4_128,sha},
 {rsa,rc4_128,md5},
 {dhe_rsa,des_cbc,sha},
 {rsa,des_cbc,sha}]



-----------------------------------------------------------------------

ns_server:
/usr/local/Cellar/openssl/1.0.2h_1/bin/openssl s_client -connect 127.0.0.1:19000 -CAfile /Users/artem/Work/cert/newcerts/root.crt

query:
/usr/local/Cellar/openssl/1.0.2h_1/bin/openssl s_client -connect 127.0.0.1:19499 -CAfile /Users/artem/Work/cert/newcerts/root.crt

fts:
/usr/local/Cellar/openssl/1.0.2h_1/bin/openssl s_client -connect 127.0.0.1:19200 -CAfile /Users/artem/Work/cert/newcerts/root.crt



depth=1 CN = Couchbase Server 044d7e12
verify return:1
depth=0 CN = 127.0.0.1
verify return:1
---
Certificate chain
 0 s:/CN=127.0.0.1
   i:/CN=Couchbase Server 044d7e12


depth=1 CN = Couchbase Server 044d7e12
verify return:1
depth=0 CN = 127.0.0.1
verify return:1
---
Certificate chain
 0 s:/CN=127.0.0.1
   i:/CN=Couchbase Server 044d7e12
 1 s:/CN=Couchbase Server 044d7e12
   i:/CN=Couchbase Server 044d7e12


/Users/artem/Library/Logs/Homebrew/openssl
/usr/local/Cellar/openssl/1.0.2h_1/bin/openssl
/usr/local/Cellar/openssl/1.0.2j/bin/openssl
/usr/local/Cellar/openssl/1.0.2l/bin/openssl
/usr/local/Cellar/openssl@1.1/1.1.0f/bin/openssl


query verification:
-------------------

If you are manually starting query from full build then
 
Run
./start-cbq-engine.sh --datastore=http://127.0.0.1:8091 --http=:8093 --configstore=http://127.0.0.1:8091 --enterprise=true --https=:18093 --certfile=/opt/couchbase/var/lib/couchbase/inbox/chain.pem --keyfile=/opt/couchbase/var/lib/couchbase/inbox/pkey.key --ssl_minimum_protocol=tlsv1
 
Then to run a query use
 
curl -u Administrator:password --insecure https://127.0.0.1:18093/query/service -d 'statement=select * from system:keyspaces'
 
or if you have the certificate then use
 
curl -u Administrator:password --cacert chain.pem https://127.0.0.1:18093/query/service -d 'statement=select * from system:keyspaces'
 
openssl s_client -showcerts -connect 127.0.0.1:18093 -CAfile /root/sslca/root/ca.pem



------------------------------

curl -u Administrator:password --cacert data/n_0/config/ssl-cert-key.pem-ca https://127.0.0.1:19499/query/service -d 'statement=select * from system:keyspaces'



Ciphers:
--------
COUCHBASE_SSL_CIPHER_LIST is not supported
setting ciphers for golang components is described here: http://review.couchbase.org/#/c/81442/
the setting for memcached is done as described here: https://issues.couchbase.com/browse/MB-26023
ns_server uses ssl_ciphers from static_config
as described here: https://issues.couchbase.com/browse/DOC-2674



curl -u Administrator:asdfasdf -X POST http://127.0.0.1:8091/pools/default/settings/memcached/node/self --data ssl_cipher_list=AES256-SHA256
