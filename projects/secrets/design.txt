Master password
---------------

Master password is the main key that unlocks the encryption on the cluster. Master password should be specified during the node start and should be the same on all nodes.

How babysitter obtains a master password:
1. if /masterPassword <password> is specified the babysitter will use the password from the command line
2. if /promptMasterPassword is set, the babysitter will prompt for master password
3. if none of these options are used, the babysitter will get the master password from $CB_MASTER_PASSWORD
4. if $CB_MASTER_PASSWORD is not set, the babysitter will use an empty password

#4 is a default option that is insecure and provides obfuscation only

lock_key and data_key
---------------------
1. lock_key is generated from the master password via strong enough KDF
2. data_key is randomly generated at cluster initialization
3. lock_key and data_key should have the same length
4. encrypted_data_key = lock_key xor data_key
5. encrypted_data_key is stored in ns_config and this way distributed to all nodes
   - for the rotation and password verification purposes we will need to allow store multiple
     keys together with password hashes
6. all the secrets in ns_config are symetrically encrypted with data_key
 
Encryption service
------------------

Resides on babysitter node and provides erlang exported api to encrypt/decrypt secrets.

Encryption service is initialized with master password. Then it will generate lock_key and keep it in memory.
Also it should keep encrypted_data_key in memory and refresh it every time when it changes in ns_config.

To encrypt/decrypt the data:
1. hash the password and find the encrypted_data_key that is paired with the matching hash
2. unlock the data_key (data_key = encrypted_data_key xor lock_key)
3. use the data_key to encrypt/decrypt the data

Encryption service api:
-----------------------
encrypt(component_password, plaindata) -> encrypted_data | auth_failure
  - encrypts the data for the particular component
  
decrypt(component_password, encrypted_data) -> plain_data | auth_failure
  - decrypts the data for the particular component
  
auth(component_password) -> boolean
  - simply authenticates the component without encrypting/decrypting data

...where component_password is a key that uniquely identifies the component.

ns_server should have http endpoints to proxy encrypt/decrypt requests from components to encryption service. Being itself a component it will simply use erlang api for it's own encryption/decryption needs.

Authenticating components and securing the communications:
----------------------------------------------------------

1. Encryption service should maintain map (component_id -> component_key) with one entry per component.
2. On component start component_id and component_key are generated as random keys of the same length.
3. component_id and component_key are sent to component via standard input and kept in the component memory

To call the encrypt/decrypt api the component should:
  1. Symmetrically encrypt the data with the component_key
  2. calculate component_password as (component_id xor component_key)
  3. call the api and decrypt the result with the component_key

To serve the call the encryption service should:
  1. look for the entry in the map where (component_key xor component_id = component_key)
  2. use the component_key to decrypt the input
  3. use data_key to encrypt or decrypt the data
  4. encrypt the result with the component_key

----------------------------------------------------------------

Maintanance of the keys:

1. Master password rotation
  - user needs to supply old and new master passwords
  - decrypt correct encrypted_data_key into data_key
  - encrypt it with the new password and create new encrypted_data_key in ns_config
  - distribute new master key to all nodes (how securely ???)
  - erase old encrypted_data_key from the ns_config
  
2. Data key rotation
  - in addition to #1 need to decript and encrypt all encrypted data in ns_config

3. Changing cypher
  - consider storing cypher metadata and data_key id together with the encrypted value 

4. Forgot password procedure
  - same as #1 but with some data loss: we can regenerate memcached password, but all bucket passwords and xdcr passwords will need to be reset

Validation of the master password:

1. decrypt memcached password
2. see if memcached connection succeeds

Other necessary improvements:
-----------------------------

1. do not allow babysitter to start any executables outside of the bin directory

Further development:
--------------------

1. KMIP integration, for proper data_key encryption
2. Consider automatic rotation of component keys
3. Encryption of ssl private keys
